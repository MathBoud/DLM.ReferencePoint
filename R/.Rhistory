geom_bar(aes(y=Land.tons, x=Year), position = "stack", stat="identity", fill="darkgreen", color="Black") +
ylab("Landings (t)") +
xlab("Year") +
theme_classic()
plot.Landings
DLMobject <- new('Data')                            #  Create a blank DLM object
DLMobject@Name <- 'DLM object'                      #  Create a blank DLM object
DLMobject@Common_Name <- 'Greenland halibut'        #  Common name of the species
DLMobject@Cat <- matrix((turbot$Land.tons) ,nrow=1) #  Total annual catches (Matrix of nsim rows and nyears columns)
DLMobject@Ind <- matrix(data=NA, nrow=1, ncol=ncol(DLMobject@Cat))   #  Relative abundance index (Matrix of nsim rows and nyears columns)
DLMobject@Year<-as.integer(turbot$Year)             #  Years of the catch and abundance index time series
DLMobject@Units <- "tonnes"                         #  State units of catch
DLMobject@Dt <- 0.5                                 #  Depletion over time t
DLMobject@Dep <- 0.3                                #  Depletion relative to unfished
DLMobject@vbK <- 0.09                               #  VB maximum growth rate
DLMobject@vbt0 <- -0.05                             #  VB theoretical age at zero length
DLMobject@vbLinf <- 90                              #  VB maximum length
DLMobject@Mort <- 0.25                               #  Natural mortality rate
DLMobject@FMSY_M <- 0.87                            #  Ratio of FMSY/M
DLMobject@BMSY_B0 <- 0.6                            #  BMSY relative to unfished
DLMobject@L50 <- 36                                 #  Length at 50% maturity
DLMobject@L95 <- 42                                 #  Length at 95% maturity
DLMobject@MaxAge <- 50                              #  Maximum age. Vector nsim long. Positive integer
DLMobject@wla <- 5.155 * 10e-6
DLMobject@wlb <- 3.140
DLMobject@steep <- 0.99
turbot.SSS <- DLMobject
# Run SSS function
SSS.result<-SSS(
x = 1,              # A position in the Data object (by default, equal to one for assessments)
Data = turbot.SSS,  # An object of class Data
SR = "BH",          # Stock-recruit function (either "BH" for Beverton-Holt or "Ricker")
dep = 0.3)          # Depletion value to use in the model
# Visualize results of the SSS analysis for
# MSY
SSS.result@MSY
# SSBmsy
SSS.result@SSBMSY
# Bmsy
SSS.result@BMSY
# B/Bmsy ratio
SSS.result@B_BMSY
# Activate required package
library(datalimited2)
library(ggplot2)
library(dplyr)
# Load capelin 4RST catch (capelin.csv) from data folder on the github repository https://github.com/MathBoud/C68/data
capelin.landings<-read.csv("C:/Users/BoudreauMA/Desktop/C-68/Data-limited method/Data/capelin.landings.csv", header = TRUE, sep = ",")
# plot landings
plot.Landings<-ggplot2::ggplot(capelin.landings) +
geom_bar(aes(y=Landings.total, x=Year), position = "stack", stat="identity", fill="darkgreen", color="Black") +
ylab("Landings (t)") +
xlab("Year") +
xlim(1960,2021) +
ylim(0,15000) +
theme_classic()
plot.Landings
#Using the 1975-2019 period where the after the exploratory phase of the fishery
x<-filter(capelin.landings, Year %in% 1975:2019)
# Run ocom function
ocom_Result<-ocom(year = x$Year, catch = x$Landings.total, m=0.4) #requires an estimate of natural mortality m=0.4 for capelin
plot_dlm(ocom_Result)
# Visualize estimates and reference point from OCOM
ocom_Result$ref_pts
rm(list=ls())
# Load capelin 4RST catch (capelin.csv) from data folder on the github repository https://github.com/MathBoud/C68/data
capelin.landings<-read.csv("C:/Users/BoudreauMA/Desktop/C-68/Data-limited method/Data/capelin.landings.csv", header = TRUE, sep = ",")
# To run the SSS function in MSE package, you will have to create a Data object with the available information
# required parameter in DLM object : Cat, Steep, Mort, L50, L95, vbK, vbLinf, vbt0, wla, wlb, MaxAge
DLMobject <- new('Data')                                             #  Create a blank DLM object
DLMobject@Name <- 'DLM object'                                       #  Create a blank DLM object
DLMobject@Common_Name <- 'Capelin'                                   #  Common name of the species
DLMobject@Year<-as.integer(capelin.landings$Year)             #  Years of the catch and abundance index time series
DLMobject@Cat <- matrix(capelin.landings$Landings.total ,nrow=1)                    #  Total annual catches (Matrix of nsim rows and nyears columns)
DLMobject@Units <- "tonnes"                                          #  State units of catch
# To run the SSS function in MSE package, you will have to create a Data object with the available information
# required parameter in DLM object : Cat, Steep, Mort, L50, L95, vbK, vbLinf, vbt0, wla, wlb, MaxAge
DLMobject <- new('Data')                                             #  Create a blank DLM object
DLMobject@Name <- 'DLM object'                                       #  Create a blank DLM object
rm(list=ls())
# Activate required package
library(MSEtool)
library(ggplot2)
library(ggpubr)
library(dplyr)
rm(list=ls())
# Load capelin 4RST catch (capelin.csv) from data folder on the github repository https://github.com/MathBoud/C68/data
capelin.landings<-read.csv("C:/Users/BoudreauMA/Desktop/C-68/Data-limited method/Data/capelin.landings.csv", header = TRUE, sep = ",")
# plot landings
plot.Landings<-ggplot2::ggplot(capelin.landings) +
geom_bar(aes(y=Landings.total, x=Year), position = "stack", stat="identity", fill="darkgreen", color="Black") +
ylab("Landings (t)") +
xlab("Year") +
xlim(1960,2021) +
ylim(0,15000) +
theme_classic()
plot.Landings
# To run the SSS function in MSE package, you will have to create a Data object with the available information
# required parameter in DLM object : Cat, Steep, Mort, L50, L95, vbK, vbLinf, vbt0, wla, wlb, MaxAge
DLMobject <- new('Data')                                             #  Create a blank DLM object
DLMobject@Name <- 'DLM object'                                       #  Create a blank DLM object
DLMobject@Common_Name <- 'Capelin'                                   #  Common name of the species
DLMobject@Year<-as.integer(capelin.landings$Year)             #  Years of the catch and abundance index time series
DLMobject@Cat <- matrix(capelin.landings$Landings.total ,nrow=1)                    #  Total annual catches (Matrix of nsim rows and nyears columns)
DLMobject@Units <- "tonnes"                                          #  State units of catch
DLMobject@t <- ncol(DLMobject@Cat)                                   #  No. yrs for Av. catch
DLMobject@Dt <- 0.7                                                  #  Depletion over time t
DLMobject@Dep <- 0.4                                                 #  Depletion relative to unfished
DLMobject@vbK <- 0.359                                                #  VB maximum growth rate
DLMobject@vbt0 <- -1.408                                               #  VB theoretical age at zero length
DLMobject@vbLinf <- 20.6                                              #  VB maximum length
DLMobject@Mort <- 0.3                                                #  Natural mortality rate
DLMobject@FMSY_M <- 0.87                                             #  Ratio of FMSY/M
DLMobject@BMSY_B0 <- 0.6                                             #  BMSY relative to unfished
DLMobject@L50 <- 14                                                #  Length at 50% maturity
DLMobject@L95 <- 17                                               #  Length at 95% maturity
DLMobject@MaxAge <- 10                                            #  Maximum age. Vector nsim long. Positive integer
DLMobject@wla <- 0.00372
DLMobject@wlb <- 3.19
DLMobject@steep <- 0.99
capelin.SSS <- DLMobject
# Run SSS function
SSS.result<-SSS(
x = 1,              # A position in the Data object (by default, equal to one for assessments)
Data = capelin.SSS,  # An object of class Data
SR = "BH",          # Stock-recruit function (either "BH" for Beverton-Holt or "Ricker")
dep = 0.4)          # Depletion value to use in the model
# Visualize results of the SSS analysis for
# MSY
SSS.result@MSY
# SSBmsy
SSS.result@SSBMSY
# Bmsy
SSS.result@BMSY
View(SSS.result)
# Depletion (B/B0)
SSS.result@FMSY
View(SSS.result)
rm(list=ls())
# Load capelin 4RST catch (capelin.csv) from data folder on the github repository https://github.com/MathBoud/C68/data
capelin.landings<-read.csv("C:/Users/BoudreauMA/Desktop/C-68/Data-limited method/Data/capelin.landings.csv", header = TRUE, sep = ",")
# Activate required package
library(fishmethods)
library(DLMtool)
# plot landings
plot.Landings<-ggplot2::ggplot(capelin.landings) +
geom_bar(aes(y=Landings.total, x=Year), position = "stack", stat="identity", fill="darkgreen", color="Black") +
ylab("Landings (t)") +
xlab("Year") +
xlim(1960,2021) +
ylim(0,15000) +
theme_classic()
plot.Landings
# To run DCAC method, you have to create a Data-limited method object with the available information
# Inputs needed for DCAC : Cat, AvC, BMSY_B0, FMSY_M, LHYear, Mort, Year, t
DLMobject <- new('Data')                                             #  Create a blank DLM object
DLMobject@Name <- 'DLM object'                                       #  Create a blank DLM object
DLMobject@Common_Name <- 'Capelin'                                   #  Common name of the species
DLMobject@Cat <- matrix(capelin.landings$Landings.total ,nrow=1)                    #  Total annual catches (Matrix of nsim rows and nyears columns)
DLMobject@Ind <- matrix(data=NA, nrow=1, ncol=ncol(DLMobject@Cat))   #  Relative abundance index (Matrix of nsim rows and nyears columns)
DLMobject@Year<-as.integer(capelin.landings$Year)                                   #  Years of the catch and abundance index time series
DLMobject@Units <- "tonnes"                                          #  State units of catch
DLMobject@Rec <- matrix(data=NA, nrow=1, ncol=ncol(DLMobject@Cat))   #  Recent recruitment strength (Matrix of nsim rows and nyears columns)
DLMobject@AvC <- mean(DLMobject@Cat)                                 #  Average catches for time t
DLMobject@t <- ncol(DLMobject@Cat)                                   #  No. yrs for Av. catch
DLMobject@Dt <- 0.6                                                  #  Depletion over time t
DLMobject@Dep <- 0.6                                                 #  Depletion relative to unfished
DLMobject@vbK <- 0.36                                                #  VB maximum growth rate
DLMobject@vbt0 <- -1.4                                               #  VB theoretical age at zero length
DLMobject@vbLinf <- 205                                              #  VB maximum length
DLMobject@Mort <- 0.4                                                #  Natural mortality rate
DLMobject@Abun <- FALSE                                              #  Current abundance
DLMobject@FMSY_M <- 0.75                                             #  Ratio of FMSY/M
DLMobject@L50 <- 20                                                #  Length at 50% maturity
DLMobject@L95 <- FALSE                                               #  Length at 95% maturity
DLMobject@MaxAge <- FALSE                                            #  Maximum age. Vector nsim long. Positive integer
DLMobject@BMSY_B0 <- 0.5                                             #  BMSY relative to unfished
DLMobject@LHYear <- 2019                                             #  Last year in the time catch series to consider in the analysis
# Run DBSRA from DLMtool package
# Base Version. TAC is calculated assumed MSY harvest rate multiplied by the estimated current abundance (estimated B0 x Depletion)
DBSRA(1, DLMobject, reps = 1000, plot=TRUE)
# Run dbsra from fishmethods package which propose a different way to set primary information for the function and allow to production of data object with biological reference point
# Requires Catch since the begining of the fishery, Age-at-maturity (agemat), carrying capacity (k), relative depletion level in the first and last year, FMSY/M, BMSY/K and Mortality (M)
dbsra.result<-dbsra(year = capelin.landings$Year, catch = capelin.landings$Landings.total, catchCV = NULL,
catargs = list(dist="none",low=0,up=Inf,unit="T"),
agemat=3, k = list(low=50000,up=100000,tol=0.01,permax=1000000),
b1k = list(dist="none",low=0.01,up=0.99,mean=1,sd=0.1),
btk = list(dist="beta",low=0.01,up=0.99,mean=0.4,sd=0.1,refyr=2019),
fmsym = list(dist="lnorm",low=0.3,up=0.7,mean=0.45,sd=0.05),
bmsyk = list(dist="beta",low=0.05,up=0.95,mean=0.4,sd=0.05),
M = list(dist="lnorm",low=0.2,up=0.5,mean=0.4,sd=0.1),
nsims = 10000)
# visualize reference points, stock size estimate with DB-SRA method
dbsra.result$Estimates
# To run the SSS function in MSE package, you will have to create a Data object with the available information
# required parameter in DLM object : Cat, Steep, Mort, L50, L95, vbK, vbLinf, vbt0, wla, wlb, MaxAge
DLMobject <- new('Data')                                             #  Create a blank DLM object
DLMobject@Name <- 'DLM object'                                       #  Create a blank DLM object
DLMobject@Common_Name <- 'Capelin'                                   #  Common name of the species
DLMobject@Year<-as.integer(capelin.landings$Year)             #  Years of the catch and abundance index time series
DLMobject@Cat <- matrix(capelin.landings$Landings.total ,nrow=1)                    #  Total annual catches (Matrix of nsim rows and nyears columns)
DLMobject@Units <- "tonnes"                                          #  State units of catch
DLMobject@t <- ncol(DLMobject@Cat)                                   #  No. yrs for Av. catch
DLMobject@Dt <- 0.7                                                  #  Depletion over time t
DLMobject@Dep <- 0.4                                                 #  Depletion relative to unfished
DLMobject@vbK <- 0.359                                                #  VB maximum growth rate
DLMobject@vbt0 <- -1.408                                               #  VB theoretical age at zero length
DLMobject@vbLinf <- 20.6                                              #  VB maximum length
DLMobject@Mort <- 0.3                                                #  Natural mortality rate
DLMobject@FMSY_M <- 0.87                                             #  Ratio of FMSY/M
DLMobject@BMSY_B0 <- 0.6                                             #  BMSY relative to unfished
DLMobject@L50 <- 14                                                #  Length at 50% maturity
DLMobject@L95 <- 17                                               #  Length at 95% maturity
DLMobject@MaxAge <- 10                                            #  Maximum age. Vector nsim long. Positive integer
DLMobject@wla <- 0.00372
DLMobject@wlb <- 3.19
DLMobject@steep <- 0.99
capelin.SSS <- DLMobject
# Run SSS function
SSS.result<-SSS(
x = 1,              # A position in the Data object (by default, equal to one for assessments)
Data = capelin.SSS,  # An object of class Data
SR = "BH",          # Stock-recruit function (either "BH" for Beverton-Holt or "Ricker")
dep = 0.4)          # Depletion value to use in the model
# Visualize results of the SSS analysis for
# MSY
SSS.result@MSY
# Bmsy
SSS.result@BMSY
View(SSS.result)
## graph###
Year<-1960:2020
Biomass<-data.frame(Year,SSS.result@B)
Landing.Index.data <- left_join(capelin.landings, Biomass, by="Year")
Landing.plot<-ggplot() +
geom_bar(data = Landing.Index.data, aes(y=Landings.total, x=Year), color = "black", fill="darkgreen", position = "stack", stat="identity") +
xlab("Year") + ylab("Landings (t)") +
ylim(0,100000) +
scale_x_continuous(breaks = seq(from=min(Biomass$Year, na.rm = TRUE), to=max(Biomass$Year, na.rm = TRUE), by = 5)) +
ggtitle("4RST-Capelin Landings") +
theme_classic() +  theme(axis.title = element_text(size = 16, colour = "black"),
axis.text = element_text(size = 12),
plot.title = element_text(size = 15, colour = "blue3", face = "bold"),
strip.text.x = element_text(size = 14, face="bold"))
Biomass.plot<-ggplot() +
geom_line(data = Landing.Index.data, aes(y=SSS.result.B, x=Year),color="blue", size=1.5) +
xlab("Year") + ylab("Biomass (t)") +
ylim(0,100000) +
scale_x_continuous(breaks = seq(from=min(Biomass$Year, na.rm = TRUE), to=max(Biomass$Year, na.rm = TRUE), by = 5)) +
ggtitle("4RST-Capelin Stock biomass") +
theme_classic() +  theme(axis.title = element_text(size = 16, colour = "black"),
axis.text = element_text(size = 12),
plot.title = element_text(size = 15, colour = "blue3", face = "bold"),
strip.text.x = element_text(size = 14, face="bold"))
ggarrange(Landing.plot,Biomass.plot, ncol = 1, nrow = 2)
Year<-1960:2020
BBmsy<-data.frame(Year,SSS.result@B_BMSY)
str(BBmsy)
ggplot(data=BBmsy, aes(x=Year, y=SSS.result.B_BMSY)) +
geom_line(size=1.2, colour="black") +
geom_point(size=2, colour="black") +
geom_hline(yintercept=0.2, linetype="dashed", color = "red", size=1.1) +
geom_hline(yintercept=0.5, linetype="dashed", color = "orange", size=1.1) +
geom_hline(yintercept=0.8, linetype="dashed", color = "yellow2", size=1.1) +
geom_hline(yintercept=1, linetype="dashed", color = "green2", size=1.1) +
annotate(geom="text", x=min(BBmsy$Year)+1, y=0.1, label="Collapsed", color="red", size=5) +
annotate(geom="text", x=min(BBmsy$Year)+1, y=0.35, label="Severely \noverfished", color="orange", size=5) +
annotate(geom="text", x=min(BBmsy$Year)+1, y=0.65, label="Overfished", color="yellow2", size=5) +
annotate(geom="text", x=min(BBmsy$Year)+1, y=0.9, label="Slightly \noverfished", color="greenyellow", size=5) +
annotate(geom="text", x=min(BBmsy$Year)+1, y=1.1, label="Healty", color="green2", size=5) +
xlab("Year") +
ylab("B/Bmsy") +
theme_classic()
View(capelin.SSS)
View(SSS.result)
View(SSS.result)
# Activate required package
library(fishmethods)
library(DLMtool)
dbsra.result <- dbsra(
year = turbot$Year,        # vector containing the time series of numeric year labels
catch = turbot$Land.tons,  # vector containing the time series of catch data (in weight). Missing values are not allowed
catchCV = NULL,            # vector containing the time series of coefficients of variation associated with catch if resampling of catch is desired (Default = NULL)
catargs = list(dist="none",low=0,up=Inf,unit="T"),      # list arguments associated with resampling of catch. dist is the specification of the resampling distribution to use ("none" = no resampling, "unif"=uniform, "norm" = normal, and "lnorm" =log-normal).
agemat=12,  # median age at entry to the reproductive biomass
# maxm =    # the maximum limit of the Pella-Tomlinson shape parameter that should not be exceeded in the rule for accepting a run
k = list(low=50000,up=100000,tol=0.01,permax=1000000),  # list arguments for estimation of k (carrying capacity). low and up are the lower and upper bounds of the minimization routine and tol is the tolerance level for minimization
b1k = list(dist="none",low=0.01,up=0.99,mean=1,sd=0.1), # list arguments for B1/K, the relative depletive level in the first year. dist is the statistical distribution name from which to sample b1k. low and up are the lower and upper bounds of b1k in the selected distribution.
# mean and sd are the mean and standard deviation for selected distributions. The following are valid distributions: "none", "unif" - uniform, "norm" - normal, "lnorm" - log-normal, "gamma" - gamma, and "beta" - beta distributions.
btk = list(dist="beta",low=0.01,up=0.99,mean=0.4,sd=0.1,refyr=2019), # list arguments for Bt/K, the relative depletive level in a specific reference year (refyr). dist is the statistical distribution name from which to sample btk. low and up are the lower and upper bounds of btk in the selected distribution.
# mean and sd are the mean and standard deviation for selected distributions. The following are valid distributions: "none", "unif" - uniform, "norm" - normal, "lnorm" - log-normal, "gamma" - gamma, and "beta" - beta distributions.
fmsym = list(dist="lnorm",low=0.3,up=0.7,mean=0.45,sd=0.05),  # list arguments for Fmsy/M. dist is the statistical distribution name from which to sample Fmsy/M. low and up are the lower and upper bounds of Fmsy/M in the selected distribution.
# mean and sd are the mean and standard deviation for selected distributions.
bmsyk = list(dist="beta",low=0.05,up=0.95,mean=0.4,sd=0.05),  # list arguments for Bmsy/k. dist is the statistical distribution name from which to sample Bmsy/k. low and up are the lower and upper bounds of Bmsy/k in the selected distribution.
# mean and sd are the mean and standard deviation for selected distributions
M = list(dist="lnorm",low=0.2,up=0.3,mean=0.25,sd=0.1),  # list arguments for natural mortality. dist is the statistical distribution name from which to sample M. low and up are the lower and upper bounds of M in the selected distribution.
# mean and sd are the mean and standard deviation for selected distributions.
nsims = 10000, # number of Monte Carlos samples,
graphs = c(1:14), # vector specifying which graphs should be produced. 1 = line plot of observed catch versus year, 2 = histogram of plausible (accepted) k values, 3 = histogram of plausible Bmsy values, 4 = histogram of plausible MSY values,
# 5 = histogram of plausible Fmsy values, 6 = histogram of Umsy values, 7 = histogram of plausible Cmsy , 8 = histogram of Bmsy from plausible M, 9 = histogram of plausible Bt/k values, 10 = histogram of plausible Fmsy/M values,
# 11 = histogram of plausible Bmsy/k values and 12 = histogram of plausible biomasses in termyr, 13 = line plots of accepted and rejected biomass trajectores with median and 2.5th and 97.5th percentiles (in red) and
# 14 = stacked histograms of accepted and rejected values for each input parameter and resulting estimates and if grout=2, .tif files are saved with "AR" suffix. Any combination of graphs can be selected within c(). Default is all.
#pstats = 1  # list control arguments for plotting the median and 2.5 and management quantities on respective graphs. ol = 0, do not overlay values on plots, 1 = overlay values on plots. mlty and mlwd are the line type and line width of the median value;
# llty and llwd are the line type and line width of the 2.5 ulwd are the line type and line width of the 97.5
)
# Load capelin 4RST catch (capelin.csv) from data folder on the github repository https://github.com/MathBoud/C68/data
capelin.landings<-read.csv("C:/Users/BoudreauMA/Desktop/C-68/Data-limited method/Data/capelin.landings.csv", header = TRUE, sep = ",")
# plot landings
plot.Landings<-ggplot2::ggplot(capelin.landings) +
geom_bar(aes(y=Landings.total, x=Year), position = "stack", stat="identity", fill="darkgreen", color="Black") +
ylab("Landings (t)") +
xlab("Year") +
xlim(1960,2021) +
ylim(0,15000) +
theme_classic()
plot.Landings
library(ggplot2)
# plot landings
plot.Landings<-ggplot2::ggplot(capelin.landings) +
geom_bar(aes(y=Landings.total, x=Year), position = "stack", stat="identity", fill="darkgreen", color="Black") +
ylab("Landings (t)") +
xlab("Year") +
xlim(1960,2021) +
ylim(0,15000) +
theme_classic()
plot.Landings
# To run DCAC method, you have to create a Data-limited method object with the available information
# Inputs needed for DCAC : Cat, AvC, BMSY_B0, FMSY_M, LHYear, Mort, Year, t
DLMobject <- new('Data')                                             #  Create a blank DLM object
DLMobject@Name <- 'DLM object'                                       #  Create a blank DLM object
DLMobject@Common_Name <- 'Capelin'                                   #  Common name of the species
DLMobject@Cat <- matrix(capelin.landings$Landings.total ,nrow=1)                    #  Total annual catches (Matrix of nsim rows and nyears columns)
DLMobject@Ind <- matrix(data=NA, nrow=1, ncol=ncol(DLMobject@Cat))   #  Relative abundance index (Matrix of nsim rows and nyears columns)
DLMobject@Year<-as.integer(capelin.landings$Year)                                   #  Years of the catch and abundance index time series
DLMobject@Units <- "tonnes"                                          #  State units of catch
DLMobject@Rec <- matrix(data=NA, nrow=1, ncol=ncol(DLMobject@Cat))   #  Recent recruitment strength (Matrix of nsim rows and nyears columns)
DLMobject@AvC <- mean(DLMobject@Cat)                                 #  Average catches for time t
DLMobject@t <- ncol(DLMobject@Cat)                                   #  No. yrs for Av. catch
DLMobject@Dt <- 0.6                                                  #  Depletion over time t
DLMobject@Dep <- 0.6                                                 #  Depletion relative to unfished
DLMobject@vbK <- 0.36                                                #  VB maximum growth rate
DLMobject@vbt0 <- -1.4                                               #  VB theoretical age at zero length
DLMobject@vbLinf <- 205                                              #  VB maximum length
DLMobject@Mort <- 0.4                                                #  Natural mortality rate
DLMobject@Abun <- FALSE                                              #  Current abundance
DLMobject@FMSY_M <- 0.75                                             #  Ratio of FMSY/M
DLMobject@L50 <- 20                                                #  Length at 50% maturity
DLMobject@L95 <- FALSE                                               #  Length at 95% maturity
DLMobject@MaxAge <- FALSE                                            #  Maximum age. Vector nsim long. Positive integer
DLMobject@BMSY_B0 <- 0.5                                             #  BMSY relative to unfished
DLMobject@LHYear <- 2019                                             #  Last year in the time catch series to consider in the analysis
# Run dbsra from fishmethods package which propose a different way to set primary information for the function and allow to production of data object with biological reference point
# Requires Catch since the begining of the fishery, Age-at-maturity (agemat), carrying capacity (k), relative depletion level in the first and last year, FMSY/M, BMSY/K and Mortality (M)
dbsra.result<-dbsra(year = capelin.landings$Year, catch = capelin.landings$Landings.total, catchCV = NULL,
catargs = list(dist="none",low=0,up=Inf,unit="T"),
agemat=3, k = list(low=50000,up=100000,tol=0.01,permax=1000000),
b1k = list(dist="none",low=0.01,up=0.99,mean=1,sd=0.1),
btk = list(dist="beta",low=0.01,up=0.99,mean=0.4,sd=0.1,refyr=2019),
fmsym = list(dist="lnorm",low=0.3,up=0.7,mean=0.45,sd=0.05),
bmsyk = list(dist="beta",low=0.05,up=0.95,mean=0.4,sd=0.05),
M = list(dist="lnorm",low=0.2,up=0.5,mean=0.4,sd=0.1),
nsims = 10000)
# visualize reference points, stock size estimate with DB-SRA method
dbsra.result$Estimates
View(dbsra.result)
# Run DBSRA from DLMtool package
# Base Version. TAC is calculated assumed MSY harvest rate multiplied by the estimated current abundance (estimated B0 x Depletion)
DBSRA(1, DLMobject, reps = 1000, plot=TRUE)
View(capelin.landings)
View(capelin.landings)
capelin.Indicator <- read.csv("C:/Users/BoudreauMA/Desktop/C-68/Data-limited method/Exemple/Capalin.Indicators.csv", sep = ",")
View(capelin.Indicator)
capelin.Indicator <- read.csv("C:/Users/BoudreauMA/Desktop/C-68/Data-limited method/Exemple/Capalin.Indicators.csv", sep = ";")
View(capelin.Indicator)
View(capelin.Indicator)
str(capelin.Indicator)
BMSY = 30160
plot.BMSY<-ggplot(capelin.Indicator) +
geom_point(aes(y=b, x=year), color="Blue", size=3) +
geom_line(aes(y=b, x=year), color="Blue", size=1.25) +
geom_hline(yintercept=BMSY, color="Black", size=1.25, linetype="solid") +
geom_hline(yintercept=0.8*BMSY, color="Green", size=1, linetype="dashed") +
geom_hline(yintercept=0.4*BMSY, color="Red", size=1, linetype="dashed") +
ylab("Biomass > 40 cm (t)") +
xlab("Year") +
xlim(1974,2020) +
annotate(geom="text", x=min(capelin.Indicator$year)+5, y=BMSY+0.05*BMSY, label="Bmsy",color="black", fontface="bold") +
annotate(geom="text", x=min(capelin.Indicator$year)+5, y=0.8*BMSY+0.05*BMSY, label="URP",color="green", fontface="bold") +
annotate(geom="text", x=min(capelin.Indicator$year)+5, y=0.4*BMSY+0.05*BMSY, label="LRP",color="red", fontface="bold") +
theme_classic()
plot.BMSY
plot.BMSY<-ggplot(capelin.Indicator) +
geom_point(aes(y=b, x=year), color="Blue", size=3) +
geom_line(aes(y=b, x=year), color="Blue", size=1.25) +
geom_hline(yintercept=BMSY, color="Black", size=1.25, linetype="solid") +
geom_hline(yintercept=0.8*BMSY, color="Green", size=1, linetype="dashed") +
geom_hline(yintercept=0.4*BMSY, color="Red", size=1, linetype="dashed") +
ylab("Stock biomass (t)") +
xlab("Year") +
xlim(1974,2020) +
annotate(geom="text", x=min(capelin.Indicator$year)+5, y=BMSY+0.05*BMSY, label="Bmsy",color="black", fontface="bold") +
annotate(geom="text", x=min(capelin.Indicator$year)+5, y=0.8*BMSY+0.05*BMSY, label="URP",color="green", fontface="bold") +
annotate(geom="text", x=min(capelin.Indicator$year)+5, y=0.4*BMSY+0.05*BMSY, label="LRP",color="red", fontface="bold") +
theme_classic()
plot.BMSY
plot.BMSY<-ggplot(capelin.Indicator) +
geom_point(aes(y=b, x=year), color="Blue", size=3) +
geom_line(aes(y=b, x=year), color="Blue", size=1.25) +
geom_hline(yintercept=BMSY, color="Black", size=1.25, linetype="solid") +
geom_hline(yintercept=0.8*BMSY, color="Green", size=1, linetype="dashed") +
geom_hline(yintercept=0.4*BMSY, color="Red", size=1, linetype="dashed") +
ylab("Stock biomass (t)") +
xlab("Year") +
xlim(1974,2020) +
ylim(0,70000)
annotate(geom="text", x=min(capelin.Indicator$year)+5, y=BMSY+0.05*BMSY, label="Bmsy",color="black", fontface="bold") +
annotate(geom="text", x=min(capelin.Indicator$year)+5, y=0.8*BMSY+0.05*BMSY, label="URP",color="green", fontface="bold") +
annotate(geom="text", x=min(capelin.Indicator$year)+5, y=0.4*BMSY+0.05*BMSY, label="LRP",color="red", fontface="bold") +
theme_classic()
plot.BMSY<-ggplot(capelin.Indicator) +
geom_point(aes(y=b, x=year), color="Blue", size=3) +
geom_line(aes(y=b, x=year), color="Blue", size=1.25) +
geom_hline(yintercept=BMSY, color="Black", size=1.25, linetype="solid") +
geom_hline(yintercept=0.8*BMSY, color="Green", size=1, linetype="dashed") +
geom_hline(yintercept=0.4*BMSY, color="Red", size=1, linetype="dashed") +
ylab("Stock biomass (t)") +
xlab("Year") +
xlim(1974,2020) +
ylim(0,70000) +
annotate(geom="text", x=min(capelin.Indicator$year)+5, y=BMSY+0.05*BMSY, label="Bmsy",color="black", fontface="bold") +
annotate(geom="text", x=min(capelin.Indicator$year)+5, y=0.8*BMSY+0.05*BMSY, label="URP",color="green", fontface="bold") +
annotate(geom="text", x=min(capelin.Indicator$year)+5, y=0.4*BMSY+0.05*BMSY, label="LRP",color="red", fontface="bold") +
theme_classic()
plot.BMSY
rm(list=ls())
# Load capelin 4RST catch (capelin.csv) from data folder on the github repository https://github.com/MathBoud/C68/data
capelin.landings<-read.csv("C:/Users/BoudreauMA/Desktop/C-68/Data-limited method/Data/capelin.landings.csv", header = TRUE, sep = ",")
# plot landings
plot.Landings<-ggplot2::ggplot(capelin.landings) +
geom_bar(aes(y=Landings.total, x=Year), position = "stack", stat="identity", fill="darkgreen", color="Black") +
ylab("Landings (t)") +
xlab("Year") +
xlim(1960,2021) +
ylim(0,15000) +
theme_classic()
# Load capelin mean annual weigth by unit of effort in the DFO summer bottom trawl survey (PUE.capelin) from data folder on the github repository https://github.com/MathBoud/C68/data
PUE<-read.csv("C:/Users/BoudreauMA/Desktop/C-68/Data-limited method/Data/capelin.PUEsurvey.nGSL.csv", header = TRUE, sep = ",")
#Visualize available standardized CPUE time series (from abundance survey or commercial fishery)
plot.CPUE<-ggplot(PUE, aes(x=Year, y=moy)) +
geom_point(color="blue", size=3) +
geom_line(color="blue", size=1.25) +
ylab("Survey Mean CPUE (kg/tow)") +
xlab("Year") +
geom_errorbar(aes(ymin=ICmin, ymax=ICmax), width=.5, position=position_dodge(.9), color = "blue") +
theme_classic()
ggarrange(plot.Landings, plot.CPUE, ncol = 1, nrow = 2)
library(ggpmisc)
library(ggpubr)
ggarrange(plot.Landings, plot.CPUE, ncol = 1, nrow = 2)
# Recent trend in CPUE from abundance survey in last 5 years
RecYearPUE<-subset(PUE, Year >= max(PUE$Year)-4) #Get N recent number of year, often 5 to 10
plot.RecentTrend<-ggplot(RecYearPUE, aes(x=Year, y=moy)) +
geom_point(color="blue", size=3) +
geom_line(color="blue", size=1.25) +
ylab("Mean Survey CPUE (kg/tow)") +
xlab("Year") +
xlim(c(min(RecYearPUE$Year), max(RecYearPUE$Year))) +
geom_errorbar(aes(ymin=ICmin, ymax=ICmax), width=.5, position=position_dodge(.9), color = "blue") +
theme_classic()
#Get simple linear regression result for trend in time series
fit1<-lm(moy~Year, RecYearPUE)
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
xlab("Year") +
ylab("Mean Survey CPUE (kg/tow)") +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
regression.Survey<-ggplotRegression(fit1)
# Recent trend in 4RST capelin landings in last 5 years
RecYearLandings<-subset(capelin.landings, Year >= max(capelin.landings$Year)-4) #Get N recent number of year, often 5 to 10
plot.Recent.Landings<-ggplot(RecYearLandings, aes(x=Year, y=Landings.total)) +
geom_point(color="blue", size=3) +
geom_line(color="blue", size=1.25) +
ylab("Landings (t)") +
xlab("Year") +
ylim(0,max(RecYearLandings$Landings.total)) +
xlim(c(min(RecYearLandings$Year), max(RecYearLandings$Year))) +
theme_classic()
#Get simple linear regression result for trend in time series
fit1<-lm(Landings.total~Year, RecYearLandings)
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
xlab("Year") +
ylab("Landings (t)") +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
regression.Landings<-ggplotRegression(fit1)
ggarrange(plot.RecentTrend, plot.Recent.Landings, regression.Survey, regression.Landings, nrow = 2, ncol = 2)
View(plot.RecentTrend)
View(capelin.landings)
